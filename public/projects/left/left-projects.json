{
	"1": {
		"id": 1,
		"title": "Co-Write: AI-Assisted Learning Platform",
		"description": "An AI-powered platform that provides targeted assistance to students within professor-defined boundaries, promoting academic integrity and enhancing the learning experience.",
		"image": "/images/left/co-write.png",
		"technologies": ["Next.js", "Tailwind CSS", "FastAPI", "MongoDB", "Langchain", "RAG"],
		"githubLink": "https://devpost.com/software/co-write-9ip45u",
		"liveLink": "https://co-write-fe-8u5z.vercel.app/login",
		"blog": "Co-Write is an innovative learning platform that leverages AI to provide personalized assistance to students while maintaining academic integrity. With features like custom RAG models, assignment creation with AI limitations, and targeted AI assistance, Co-Write aims to revolutionize the educational landscape.",
		"videoLink": "https://www.youtube.com/watch?v=PgGDf78yxTg"
	  },
	  "2": {
		"id": 2,
		"title": "RateMUProfessors Site",
		"description": "A full-stack web application that allows students to provide feedback, reviews, and ratings on courses and instructors.",
		"image": "/images/left/ratemuprofs.png",
		"technologies": ["React.js", "MongoDB", "FastAPI", "Node.js"],
		"githubLink": "https://github.com/FloareDor/RateMuProfs-backend",
		"liveLink": "https://rate-mu-profs-frontend.vercel.app/login",
		"blog": "RateMUProfessors is a platform designed to facilitate student feedback and improve the educational experience. With features like course and instructor ratings, past exam papers, and a scalable backend architecture, RateMUProfessors aims to empower students and promote transparency in academia.",
		"videoLink": ""
	  },
	  "3": {
		"id": 3,
		"title": "Modular Ray Tracer in C++",
		"description": "Implemented a modular ray tracer to render a scene composed of multiple spheres and tetrahedra with different colors and sizes. Added various features such as shading, glazed surfaces, animation, and perspective geometry.",
		"image": "/images/left/graphics.png",
		"technologies": ["C++", "OpenGL", "GLFW", "Ray Tracing"],
		"githubLink": "https://github.com/FloareDor/Computer-Graphics",
		"liveLink": "",
		"blog": "In this project, I developed a first-hit ray tracer from scratch using C++. Starting with a directional light and parallel camera geometry, I generated rays and solved ray-object intersection problems to determine pixel colors. I then added ambient, diffuse, and specular shading to enhance the realism of the rendered scene. To further improve the visual quality, I incorporated a glazed surface effect. I also created a small animation by moving the camera and objects, assembling the rendered frames into a movie. As a final touch, I provided an option to switch between parallel and perspective camera geometries. This project allowed me to gain a deep understanding of the fundamentals of ray tracing and its application in creating visually appealing scenes.",
		"videoLink": "https://youtu.be/Mn5N6SsrhH8?si=JmcQF3ZNq2f4CWBM"
	  },
	  "4": {
		"id": 4,
		"title": "OpenGL Viewer - Model Transforms",
		"description": "Developed an OpenGL application to read and display triangular meshes, applying linear transformations for building a Model View matrix and allowing user interaction with the object.",
		"image": "/images/left/g2.png",
		"technologies": ["C++", "OpenGL", "GLSL", "GLM"],
		"githubLink": "https://github.com/FloareDor/Computer-Graphics",
		"liveLink": "",
		"blog": "In this project, I created an OpenGL application to read and display triangular meshes using the modern pipeline. I learned how to prepare and send information to the GPU and write simple code to program the GPU. I associated colors with each vertex and modified the vertex and fragment shaders to determine the color of each fragment based on the vertex colors. I implemented the functionality to read vertex geometry and connectivity from .obj files and generate a 'separate triangles' data structure. Additionally, I added linear transformations to build a Model View matrix, allowing users to interact with the object using a game-like interface. I experimented with applying transformations to the mesh in two different settings: transforming the geometry before sending it to the GPU and sending the transformation matrix to the GPU for rendering. I analyzed the performance of each approach on large meshes. This project provided me with hands-on experience in working with OpenGL, shaders, and model transformations.",
		"videoLink": ""
	  },
	  "5": {
		"id": 5,
		"title": "OpenGL Viewer - Advanced Features",
		"description": "Extended the basic 3D rendering system with advanced features such as perspective projection, z-buffer visualization, and lighting effects using Gouraud and Phong shading.",
		"image": "/images/left/g3.png",
		"technologies": ["C++", "OpenGL", "GLFW", "GLEW", "GLM"],
		"githubLink": "https://github.com/FloareDor/Computer-Graphics",
		"liveLink": "https://github.com/FloareDor/Computer-Graphics",
		"blog": "In this project, I extended the basic 3D rendering system from the previous assignment using C++, OpenGL, and GLFW. I implemented perspective projection and demonstrated the effects of changing each parameter in the perspective matrix. I added functionality to visualize the contents of the z-buffer, allowing me to see the depth of points in the scene and verify the consistency of depth values. I implemented Gouraud and Phong shading to add lighting effects and compared the results of each shading technique. As a bonus, I also provided a mechanism for flat shading and compared it with Gouraud and Phong shading. This project allowed me to explore advanced rendering techniques and gain a deeper understanding of perspective projection, z-buffering, and shading models in computer graphics.",
		"videoLink": ""
	  },
	  "6": {
		"id": 6,
		"title": "Raft Node Consensus Protocol (Implementation)",
		"description": "An implementation of the Raft consensus algorithm. Raft is a consensus protocol designed for managing a replicated log and achieving consensus across a cluster of nodes in a distributed system.",
		"image": "/images/left/raft.png",
		"technologies": [
		  "Python",
		  "Flask",
		  "Multithreading",
		  "Distributed Systems"
		],
		"githubLink": "https://github.com/FloareDor/Raft-Node-Runner",
		"liveLink": "",
		"blog": "In this project, I implemented the Raft consensus algorithm from scratch using Python and Flask. Raft is a protocol designed to manage a replicated log and achieve consensus across a cluster of nodes in a distributed system. The key features include leader election, log replication, and safety guarantees.\n\nDuring a 24-hour hackathon (Noderunner Hackathon at Catalog, where we placed first out of 50 teams), I built a cluster of nodes that could automatically communicate with each other and participate in the Raft consensus protocol. I utilized multithreading for efficient communication between nodes.\n\nWhile we initially expected to implement a full-stack application (with me handling the backend and my teammates working on the frontend and blockchain), the hackathon challenge turned out to be primarily focused on backend and distributed systems concepts.",
		"videoLink": ""
	  },
	  "7": {
		"id": 7,
		"title": "Computer Networks Lab",
		"description": "A repo containing various programming assignments and implementations related to Computer Networks concepts.",
		"image": "/images/project/networks.png",
		"technologies": [
		  "C++",
		  "C",
		  "Socket Programming",
		  "Networking Protocols"
		],
		"githubLink": "https://github.com/FloareDor/Computer-Networks-Lab",
		"liveLink": "",
		"blog": "In this repository, I have included several coding assignments and projects from my Computer Networks course. The projects cover a wide range of topics, including:\n\n- Error detection and correction using Hamming codes\n- Bit-stuffing for data transmission\n- Stop-and-wait ARQ protocol implementation\n- Cyclic Redundancy Check (CRC) for error detection\n- Socket programming for client-server communication\n- File transfer over a network\n\nThese projects allowed me to gain hands-on experience with various networking concepts, protocols, and techniques. From implementing error detection and correction algorithms to developing client-server applications using sockets, the course wasn't too bad, after all it was fun implementing these concepts.\n\n",
		"videoLink": ""
	  },
	  "8": {
		"id": 8,
		"title": "Microprocessors and Interfacing Lab",
		"description": "This repository contains various programming assignments and implementations related to Microprocessors and Interfacing concepts, completed during my undergraduate studies.",
		"image": "/images/left/mpi.png",
		"technologies": [
		  "Assembly Language (x86-64)",
		  "C Programming",
		  "Microprocessor Architecture",
		  "SIMD Instructions"
		],
		"githubLink": "https://github.com/FloareDor/MPI-LAB",
		"liveLink": "",
		"blog": "In this repository, I have included several coding assignments and projects from my Microprocessors and Interfacing course. The projects cover a wide range of topics, including:\n\n- Conversion of integers, floating-point, and double-precision numbers to binary representation\n- Linear search algorithm implementation in Assembly and C\n- Finding the maximum element in an array using Assembly Language Program (ALP)\n- Calculating the sum of a mathematical series using Assembly\n- Matrix multiplication using SIMD (Single Instruction Multiple Data) instructions\n\nThese projects allowed me to gain hands-on experience with low-level programming concepts, such as Assembly language, microprocessor architecture, and SIMD instructions. From implementing basic algorithms to optimizing matrix operations using SIMD, I had the opportunity to explore the intricate details of microprocessor operations and data representations.",
		"videoLink": ""
	  }
  }