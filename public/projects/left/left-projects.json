{
	"1": {
		"id": 1,
		"title": "Co-Write: AI-Assisted Learning Platform",
		"description": "An AI-powered platform that provides targeted assistance to students within professor-defined boundaries, promoting academic integrity.",
		"image": "/images/left/co-write.png",
		"technologies": ["Next.js", "FastAPI", "MongoDB", "Langchain"],
		"githubLink": "https://devpost.com/software/co-write-9ip45u",
		"liveLink": "https://co-write-fe-8u5z.vercel.app/login",
		"blog": "Have you ever lost a grade due to your professor marking your assignment as 'used AI' falsely? Are you tired of the high error rate AI detection software, making it an annoyance to grade your students?\n\nEnter Co-Write.\n\nBuilt in under 24 hours. CoWriter provides targeted AI assistance within professor-defined boundaries, making it a key component for all student infrastructure applications. We help students and professors set up and submit assignments while maintaining academic integrity and learning objectives, making it fun for both the profs and the students.\n\nFeatures of Co-Write\n\nFor Professors:\n\nCreate Assignments: Easily set up assignments with details like titles, descriptions, and document attachments for contextual AI assistance using RAGs and specific AI limitations.\n\nControl AI Use: Define limitations for OpenAI access to ensure students stay on track and complete assignments independently. We help preserve academic integrity and learning objectives.\n\nBuilt-in Classifier: Utilize the built-in machine learning model to determine if your student needs writing assistance or content generation help, or if it's a direct request for answer generation (which may be restricted).\n\nFor Students:\n\nTargeted Assistance: Leverage CoWriter's RAG implementation for targeted AI assistance within professor-defined document resources getting a head start on understanding assignments. Be able to use AI on your test/essay guilt-free.\n\nAdaptive OpenAI Integration: Access OpenAI's capabilities when professors provide resources, but with limitations to prevent plagiarism and encourage independent work.",
		"videoLink": "https://www.youtube.com/watch?v=PgGDf78yxTg"
	  },
	  "2": {
		"id": 2,
		"title": "RateMUProfessors Site",
		"description": "A full-stack web application that allows students to provide feedback, reviews, and ratings on courses and instructors.",
		"image": "/images/left/ratemuprofs.png",
		"technologies": ["React.js", "MongoDB", "FastAPI", "Node.js"],
		"githubLink": "https://github.com/FloareDor/RateMuProfs-backend",
		"liveLink": "https://rate-mu-profs-frontend.vercel.app/login",
		"blog": "RateMUProfessors is a platform designed to facilitate student feedback and improve the educational experience. With features like course and instructor ratings, past exam papers, and a scalable backend architecture, RateMUProfessors aims to empower students and promote transparency in academia.",
		"videoLink": ""
	  },
	  "3": {
		"id": 3,
		"title": "A Modular Ray Tracer in C++",
		"description": "Implemented a modular ray tracer to render a scene composed of multiple spheres and tetrahedra with different colors and sizes. Added various features such as shading, glazed surfaces, animation, and perspective geometry.",
		"image": "/images/left/graphics.png",
		"technologies": ["C++", "OpenGL", "GLFW", "Ray Tracing"],
		"githubLink": "https://github.com/FloareDor/Computer-Graphics",
		"liveLink": "",
		"blog": "In this project, I developed a first-hit ray tracer from scratch using C++. Starting with a directional light and parallel camera geometry, I generated rays and solved ray-object intersection problems to determine pixel colors. I then added ambient, diffuse, and specular shading to enhance the realism of the rendered scene. To further improve the visual quality, I incorporated a glazed surface effect. I also created a small animation by moving the camera and objects, assembling the rendered frames into a movie. As a final touch, I provided an option to switch between parallel and perspective camera geometries. This project allowed me to gain a deep understanding of the fundamentals of ray tracing and its application in creating visually appealing scenes.",
		"videoLink": "https://youtu.be/Mn5N6SsrhH8?si=JmcQF3ZNq2f4CWBM"
	  },
	  "4": {
		"id": 4,
		"title": "OpenGL Viewer - Model Transforms",
		"description": "Developed an OpenGL application to read and display triangular meshes, applying linear transformations for building a Model View matrix and allowing user interaction with the object.",
		"image": "/images/left/g2.png",
		"technologies": ["C++", "OpenGL", "GLSL", "GLM"],
		"githubLink": "https://github.com/FloareDor/Computer-Graphics",
		"liveLink": "",
		"blog": "In this project, I created an OpenGL application to read and display triangular meshes using the modern pipeline. I learned how to prepare and send information to the GPU and write simple code to program the GPU. I associated colors with each vertex and modified the vertex and fragment shaders to determine the color of each fragment based on the vertex colors. I implemented the functionality to read vertex geometry and connectivity from .obj files and generate a 'separate triangles' data structure. Additionally, I added linear transformations to build a Model View matrix, allowing users to interact with the object using a game-like interface. I experimented with applying transformations to the mesh in two different settings: transforming the geometry before sending it to the GPU and sending the transformation matrix to the GPU for rendering. I analyzed the performance of each approach on large meshes. This project provided me with hands-on experience in working with OpenGL, shaders, and model transformations.",
		"videoLink": ""
	  },
	  "5": {
		"id": 5,
		"title": "OpenGL Viewer - Advanced Features",
		"description": "Extended the basic 3D rendering system with advanced features such as perspective projection, z-buffer visualization, and lighting effects using Gouraud and Phong shading.",
		"image": "/images/left/g3.png",
		"technologies": ["C++", "OpenGL", "GLFW", "GLEW", "GLM"],
		"githubLink": "https://github.com/FloareDor/Computer-Graphics",
		"liveLink": "https://github.com/FloareDor/Computer-Graphics",
		"blog": "In this project, I extended the basic 3D rendering system from the previous assignment using C++, OpenGL, and GLFW. I implemented perspective projection and demonstrated the effects of changing each parameter in the perspective matrix. I added functionality to visualize the contents of the z-buffer, allowing me to see the depth of points in the scene and verify the consistency of depth values. I implemented Gouraud and Phong shading to add lighting effects and compared the results of each shading technique. As a bonus, I also provided a mechanism for flat shading and compared it with Gouraud and Phong shading. This project allowed me to explore advanced rendering techniques and gain a deeper understanding of perspective projection, z-buffering, and shading models in computer graphics.",
		"videoLink": ""
	  },
	  "6": {
		"id": 6,
		"title": "Raft Node Consensus Protocol (Implementation)",
		"description": "An implementation of the Raft consensus algorithm. Raft is a consensus protocol designed for managing a replicated log and achieving consensus across a cluster of nodes in a distributed system.",
		"image": "/images/left/raft.png",
		"technologies": [
		  "Python",
		  "Flask",
		  "Multithreading",
		  "Distributed Systems"
		],
		"githubLink": "https://github.com/FloareDor/Raft-Node-Runner",
		"liveLink": "",
		"blog": "In this project, I implemented the Raft consensus algorithm from scratch using Python and Flask. Raft is a protocol designed to manage a replicated log and achieve consensus across a cluster of nodes in a distributed system. The key features include leader election, log replication, and safety guarantees.\n\nDuring a 24-hour hackathon (Noderunner Hackathon at Catalog, where we placed first out of 50 teams), I built a cluster of nodes that could automatically communicate with each other and participate in the Raft consensus protocol. I utilized multithreading for efficient communication between nodes.\n\nWhile we initially expected to implement a full-stack application (with me handling the backend and my teammates working on the frontend and blockchain), the hackathon challenge turned out to be primarily focused on backend and distributed systems concepts.",
		"videoLink": ""
	  },
	  "7": {
		"id": 7,
		"title": "Computer Networks Lab",
		"description": "Various programming assignments and implementations related to Computer Networks concepts.",
		"image": "/images/left/cn.png",
		"technologies": [
		  "C++",
		  "Sockets",
		  "Networking Protocols"
		],
		"githubLink": "https://github.com/FloareDor/Computer-Networks-Lab",
		"liveLink": "",
		"blog": "Assignments and projects from my Computer Networks course. The projects cover a wide range of topics, including:\n\n- Error detection and correction using Hamming codes\n- Bit-stuffing for data transmission\n- Stop-and-wait ARQ protocol implementation\n- Cyclic Redundancy Check (CRC) for error detection\n- Socket programming for client-server communication\n- File transfer over a network\n\nFrom implementing error detection and correction algorithms to developing client-server applications using sockets, the course wasn't too bad, after all it was fun implementing these. I'm rn looking to apply some of this make a c++ multiplayer game from scratch, I'll update on this site if I'm anywhere near successful with it lol\n\nCheers.",
		"videoLink": ""
	  },
	  "8": {
		"id": 8,
		"title": "Microprocessors and Interfacing Lab",
		"description": "This repository contains various programming assignments and implementations related to Microprocessors and Interfacing concepts, completed during my undergraduate studies.",
		"image": "/images/left/mpi.png",
		"technologies": [
		  "Assembly (x86-64)",
		  "C",
		  "Architecture",
		  "SIMD"
		],
		"githubLink": "https://github.com/FloareDor/MPI-LAB",
		"liveLink": "",
		"blog": "During this time, I had done several coding assignments and projects alongside my Microprocessors and Interfacing course. The mini-projects cover a wide range of topics, including:\n\n- Conversion of integers, floating-point, and double-precision numbers to binary representation\n- Linear search algorithm implementation in Assembly and C\n- Finding the maximum element in an array using Assembly Language Program (ALP)\n- Calculating the sum of a mathematical series using Assembly\n- Matrix multiplication using SIMD (Single Instruction Multiple Data) instructions\n\nThese projects allowed me to gain hands-on experience with low-level programming concepts, such as Assembly language, microprocessor architecture, and SIMD instructions. From implementing basic algorithms to optimizing matrix operations using SIMD, I had the opportunity to explore the intricate details of microprocessor operations and data representations.",
		"videoLink": ""
	  },
	  "9": {
		"id": 9,
		"title": "Cryptocurrency Implementation from the Ground up",
		"description": "A blockchain implementation with a cryptocurrency wallet system, featuring transaction validation, block mining, and user wallets for sending and receiving transactions.",
		"image": "/images/left/bitcoin.jpg",
		"technologies": [
		  "Python",
		  "Blockchain",
		  "Cryptography",
		  "Networking"
		],
		"githubLink": "https://github.com/FloareDor/Floareum",
		"liveLink": "",
		"blog": "This sort of started as a meme and it helped me understand a bit of blockchain technology and cryptocurrency wallets. I developed a blockchain implementation from scratch, featuring transaction validation, block mining, and consensus mechanisms. The project also includes a user-friendly cryptocurrency wallet system, allowing users to create wallets, send and receive transactions, and track their transaction history and balances.\n\nThe backend is built using Python and the Flask web framework, with JSON :/ used for data storage and communication. The project incorporates cryptographic concepts such as ECDSA signatures and public-private key pairs for secure transactions. Networking-> uses UDP sockets and HTTP requests, employed for communication between nodes and wallets.\n\nWhile this implementation is a simplified version for educational purposes, it was fun as a freshman to work with distributed systems, cryptography, and network programming. The project has prepared me for further exploration and development in the blockchain field (Catalooooggg).",
		"videoLink": ""
	  },
	  "10":{
		"id": 10,
		"title": "E2E-Encrypted-ChatRoom",
		"description": "An end-to-end encrypted chat room application built using sockets, implementing the RSA algorithm (PKCS#1 version 1.5) and Caesar cipher for secure communication.",
		"image": "/images/left/e2e.png",
		"technologies": [
		  "Python",
		  "Sockets",
		  "Encryption",
		  "Multithreading"
		],
		"githubLink": "https://github.com/FloareDor/E2E-Encrypted-ChatRoom",
		"liveLink": "",
		"blog": "This project is an end-to-end encrypted chat room application that I developed within a short timeframe of two days during a mini-hackathon at my university. The application leverages socket programming in Python to facilitate communication between clients and the server.\n\nTo ensure secure communication, the application employs the RSA algorithm (PKCS#1 version 1.5) for encryption and decryption of messages. Additionally, the Caesar cipher is used as an extra layer of encryption, with a randomly generated shift value for each client. This multi-layered encryption approach ensures that messages can only be decrypted by the intended recipient, providing strong privacy and security.\n\nOne of the key features of this project is the generation of a new RSA key pair for each client that connects to the server. The private key is known only to the respective client, preventing unauthorized access to messages. The server facilitates the exchange of public keys among clients, enabling secure communication between them.\n\nBy implementing this project, It was cool to work with encryption algorithms, network programming, and secure communication protocols within a limited timeframe. It was a challenging yet satisfying experience and I remember this being one of the first apps that I've built lol.",
		"videoLink": ""
	  },
	  "11": {
		"id": 11,
		"title": "Intelligent Task Tracking Application",
		"description": "A task-tracking application that enables users to add tasks, set deadlines, assign priorities, and receive reminders for pending tasks, enhanced with intelligent task suggestions powered by AI.",
		"image": "/images/left/task-tracker.png",
		"technologies": [
		  "React.js",
		  "MongoDB",
		  "Python",
		  "LLMs"
		],
		"githubLink": "https://github.com/FloareDor/Intelligent-progress-tracker",
		"liveLink": "",
		"blog": "This project was a challenging and rewarding experience, where I led a team to develop a task-tracking application within a short timeframe of 8 hours during the Talentmapp Hack4Hire Hackathon. The application aimed to simplify task management by providing users with a user-friendly interface to add tasks, set deadlines, assign priorities, and receive reminders for pending tasks.\n\nOne of the key features of this project was the integration of Large Language Models (LLMs), specifically leveraging GPT-3.5, to provide users with intelligent task suggestions based on their previous activity. This feature aimed to improve user productivity and assist in task planning and organization.\n\nAs a team member, I designed the application's architecture, assigned specific tasks to each team member, and took responsibility for programming the complete secure backend, including the API and NoSQL database using MongoDB. Despite the time constraints, our team successfully deployed the application within the hackathon timeline. It was a wild but fun ride and it was my first out-of-uni hackathon.\n\nWinning the first place among 400 participants was a kind of a surprise but it was awesome. I felt like I'm on the top of the world lol.",
		"videoLink": ""
	  },
	  "12":{
		"id": 12,
		"title": "Crypto Analytics and Leaderboard System",
		"description": "A comprehensive system for real-time big data analytics, monitoring, and leaderboard management for garden.finance.",
		"image": "/images/left/lbd.png",
		"technologies": [
		  "Golang",
		  "PostgreSQL",
		  "Gorm",
		  "AWS"
		],
		"githubLink": "https://github.com/obviously/a-private-repo-corporate-dawg",
		"liveLink": "https://garden.finance/leaderboard/",
		"blog": "As an SDE Intern at Catalog, I had the opportunity to work on a comprehensive system for real-time big data analytics, monitoring, and leaderboard management in the cryptocurrency domain. One of the first projects involved several components, including fine-tuning Large Language Models (LLMs) like Llama and BERT, training a custom Named Entity Recognition (NER) model, and implementing real-time analytics using FastAPI and MongoDB.\n\nOne of the key aspects of this project was the development of efficient ways to generate training datasets for LLMs in parallel, with the goal of mapping user input to specific API endpoints by identifying relevant parameters with insanely low computing power. This involved fine-tuning distilbert ofc\n\nAt the end of my internship, I implemented a leaderboard and deterministic reward system to track and reward users based on their transactions.\n\nTo facilitate data-driven insights and monitoring, I developed a real-time big data analytics program and deployed a dashboard specifically for garden.finance. This dashboard allowed for comprehensive monitoring and analysis of crypto token volume and other relevant metrics.\n\nThe website facilitated over $200M in trading volume within the first 30 days, its wild. I dont understand the economics...",
		"videoLink": ""
	  },
		"13": {
			"id": 13,
		  	"title": "This Site",
			"description": "A portfolio website built using Next.js, TypeScript, and Three.js.",
			"githubLink": "https://github.com/FloareDor/Portfolio-Site",
			"image": "/images/left/this-site.png",
			"liveLink": "/",
			"videoLink": "",
			"technologies": [
				"Next.js",
				"TypeScript",
				"Three.js"
			],
			"blog": "Doing the WebGL part of the portfolio site was a lot of fun, especially as I prepared for my final graphics exam at UF. It was fun to apply some concepts I learned in class and bring some interactivity to the site.\n\nThanks to Tailwind CSS, I was able to set up most of the site in under 6 hours. Tailwind made it really easy to style the components and create a consistent design throughout the site."
		},
		"14": {
			"id": 14,
			"title": "HealthMyMenu (GatorFit)",
			"description": "A full-stack application that combines a food recommendation system based on restaurant menus, tailored to personal fitness needs.",
			"image": "/images/left/healthmymenu2.JPG",
			"technologies": ["Next.js", "FastAPI", "MongoDB"],
			"githubLink": "https://github.com/FloareDor/CodeForChange-Hackathon-2024-BE",
			"liveLink": "https://github.com/Maneeshk11/code-for-change-2024-FE-",
			"blog": "This was the first hackathon at UF that I participated in, and we developed the site in under 8 hours. Due to the tight time constraints, we used a Google authentication system that we had coded up for RateMUProfs. For the backend, I used MongoDB and FastAPI to quickly prototype, and employed basic macronutrient equations to map user fitness to classes. Furthermore, we utilized a simple Gainesville-based Restaurant Menu Dataset and integrated it with the GPT-3.5 Turbo's API to provide personalized food recommendations based on the user's fitness needs. Although we wanted to implement calorie tracking, time was limited as we ran into some weird Google authentication issues that ate up our time.\n\nOverall, it was good fun being there and brainstorming the idea and implementing it instantly.",
			"videoLink": ""
		}
  }